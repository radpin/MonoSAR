@model MonoSAR.Models.Membership.MemberMedicalInsert

@{
    ViewData["Title"] = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<hr />

<h2>Membership - Record Medical Certification</h2>

<form class="" asp-action="CreateOccurrence" method="post" asp-controller="MembershipOfficer">
    <div class="form-group">
        <label for="formGroupExampleInput">Training Description</label>
        <select required asp-for="MedicalID" class="form-control"></select>

    </div>

    <div class="form-group">
        <label for="formGroupExampleInput">Issued Date</label>
        <input type="date" class="form-control" required style="width:200px;" asp-for="Issued">
    </div>

    <div class="form-group">
        <label for="formGroupExampleInput">Expiration Date</label>
        <input type="date" class="form-control" required style="width:200px;" asp-for="Expiration">
    </div>

    <div class="form-inline">
        <label for="formGroupExampleInput">Member(s)</label>
        <div style="display:inline-block; float:left; width:100%;">

            <select id="member" name="member" style="width:200px;" class="form-control"></select>
        </div>
        <div id="container"><br /></div>
        <br/>

    </div>
    <div>
        <a href="#" id="filldetails" onclick="addFields()">[add another]</a>
        <br />
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>

    <datalist id="traininglist"></datalist>
    <datalist id="memberlist"></datalist>
</form>




<script type="text/javascript">

    var memberList = [];


    window.onload = function () {

        //make the json calls
        //results sent to output parameter, goes to the buildDataList methods

        trainingJSONCall();

        memberJSONCall();

    };

    function trainingJSONCall() {

        let urlTraining = '/api/medical/';

        fetch(urlTraining)
            .then(res => res.json())
            .then((out) => {
                buildTripDataList(out);
            })
            .catch(err => { ; throw err });

    }

    function memberJSONCall() {

        let urlMember = '/api/members/';

        fetch(urlMember)
            .then(res => res.json())
            .then((out) => {
                buildMemberDataList(out);
            })
            .catch(err => { throw err });

    }

    function buildMemberDataList(jsonarray) {

        //build the option list, append
        for (var i = 0; i < jsonarray.length; i++) {
            var obj = jsonarray[i];

            daySelect = document.getElementById('member');
            daySelect.options[daySelect.options.length] = new Option(obj.lastName + ', ' + obj.firstName, obj.memberId);
            console.log(obj.lastName + ', ' + obj.firstName, obj.memberId);

            memberList[i] = new Option(obj.lastName + ', ' + obj.firstName, obj.memberId);

        }

        //memberList = daySelect.options;

    }

    function buildTripDataList(jsonarray) {


        //build the option list, append
        for (var i = 0; i < jsonarray.length; i++) {
            var obj = jsonarray[i];

            daySelect = document.getElementById('MedicalID');
            daySelect.options[daySelect.options.length] = new Option(obj.title, obj.medicalId);

        }

    }


    function clone(obj) {
        if (obj === null || typeof (obj) !== 'object' || 'isActiveClone' in obj)
            return obj;

        if (obj instanceof Date)
            var temp = new obj.constructor(); //or new Date(obj);
        else
            var temp = obj.constructor();

        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                obj['isActiveClone'] = null;
                temp[key] = clone(obj[key]);
                delete obj['isActiveClone'];
            }
        }

        return temp;
    }

    function addFields() {

        // Number of inputs to create
        //var number = "1"; // document.getElementById("member").value;
        // Container <div> where dynamic content will be placed
        var container = document.getElementById("container");
        // Clear previous contents of the container

        var selectMember = document.createElement("select");
        selectMember.style = "width:200px;";
        selectMember.id = "member" + document.getElementsByName('member').length;
        selectMember.name = "member";
        selectMember.className = "form-control";

        //run through the existing memberlist, make new <select> options
        for (var i = 0; i < memberList.length; i++) {

            var obj = memberList[i];
            selectMember.options[selectMember.options.length] = new Option(obj.text, obj.value);
        }

        var br = document.createElement("br");
        var brx = document.createElement("br");

        container.appendChild(selectMember);
        container.appendChild(br);
        container.appendChild(brx);
    }

</script>